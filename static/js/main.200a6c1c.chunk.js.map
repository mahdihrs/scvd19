{"version":3,"sources":["styles/index.js","components/AllCountries.js","components/IndoCurrentInfo.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","table","minWidth","flag","width","indoFlagContainer","border","height","indoFlag","indoFlagOuterContainer","display","placeItems","indoCurrentInfoContainer","marginTop","marginBottom","indoDetailDataContainer","marginRight","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","AllCountries","classes","useState","cases","setCases","loading","setLoading","React","page","setPage","rowsPerPage","setRowsPerPage","useEffect","allCountriesCases","axios","get","then","data","slice","catch","err","console","log","Container","maxWidth","TableContainer","component","Paper","Table","stickyHeader","className","TableHead","size","align","TableBody","map","cov","key","country","src","countryInfo","alt","iso3","toLocaleString","deaths","recovered","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","IndoDetail","property","unit","Grid","container","justify","item","InfoCurrentInfo","indonesiaCases","IndoCases","xs","sm","md","casesPerOneMillion","deathsPerOneMillion","toFixed","App","IndoCurrentInfo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.200a6c1c.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 700,\n  },\n  flag: {\n    width: 30\n  },\n  indoFlagContainer: {\n    border: '1px solid black',\n    height: 'fit-content'\n  },\n  indoFlag: {\n    height: 100,\n  },\n  indoFlagOuterContainer: {\n    display: 'grid',\n    placeItems: 'center'\n  },\n  indoCurrentInfoContainer: {\n    marginTop: '3.5rem',\n    marginBottom: '3.5rem'\n  },\n  indoDetailDataContainer: {\n    marginRight: '1.5rem'\n  }\n}))\n\nexport default useStyles;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nimport useStyles from '../styles';\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 15,\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default\n    },\n  }\n}))(TableRow);\n\nconst AllCountries = () => {\n  const classes = useStyles();\n  const [cases, setCases] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  //pagination\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  useEffect(() => {\n    allCountriesCases();\n  }, []);\n\n  const allCountriesCases = () => {\n    axios.get('https://corona.lmao.ninja/countries')\n      .then(({ data }) => {\n        setLoading(false);\n        setCases(data.slice(0, 200));\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <TableContainer component={Paper}>\n        <Table stickyHeader className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell size=\"small\" align=\"center\">Country</StyledTableCell>\n              <StyledTableCell align=\"center\">Cases</StyledTableCell>\n              <StyledTableCell align=\"center\">Deaths</StyledTableCell>\n              <StyledTableCell align=\"center\">Recovered</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          {loading && (\n            <div>Loading ...</div>\n          )}\n          <TableBody>\n            {cases.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(cov => (\n              <StyledTableRow key={cov.country}>\n                <StyledTableCell size=\"small\" align=\"center\">\n                  <img src={cov.countryInfo.flag} alt={cov.country} className={classes.flag} />\n                  <div>{cov.countryInfo.iso3}</div>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">{cov.cases.toLocaleString()}</StyledTableCell>\n                <StyledTableCell align=\"center\">{cov.deaths.toLocaleString()}</StyledTableCell>\n                <StyledTableCell align=\"center\">{cov.recovered.toLocaleString()}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component=\"div\"\n        count={cases.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Container>\n  )\n}\n\nexport default AllCountries;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport useStyles from '../styles';\n\nconst InfoCurrentInfo = () => {\n  const classes = useStyles();\n  const [indonesiaCases, setCases] = useState({\n    countryInfo: { flag: '' }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    IndoCases();\n  }, [])\n\n  const IndoCases = () => {\n    axios.get('https://corona.lmao.ninja/countries/Indonesia')\n      .then(({ data }) => {\n        setLoading(false);\n        setCases(data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.indoCurrentInfoContainer}>\n      {loading ?\n        <div>Loading ...</div>\n        :\n      (\n        <Grid container justify=\"center\">\n          <Grid xs={12} sm={4} item className={classes.indoFlagOuterContainer}>\n            <div className={classes.indoFlagContainer}>\n              <img src={indonesiaCases.countryInfo.flag} className={classes.indoFlag} alt=\"Indonesia Flag\" />\n            </div>\n          </Grid>\n          <Grid xs={12} sm={4} md={4} item>\n            <div>\n              <h2><strong>{indonesiaCases.country}</strong></h2>\n            </div>\n            <IndoDetail property=\"Positif\" value={indonesiaCases.cases} />\n            <IndoDetail property=\"Meninggal\" value={indonesiaCases.deaths} />\n            <IndoDetail property=\"Sembuh\" value={indonesiaCases.recovered} />\n            <IndoDetail property=\"Kasus per 1 juta\" value={indonesiaCases.casesPerOneMillion} />\n            <IndoDetail property=\"Meninggal per 1 juta\" value={indonesiaCases.deathsPerOneMillion} />\n            <IndoDetail property=\"Fatality Rate\" value={(indonesiaCases.deaths / indonesiaCases.cases * 100).toFixed(1)} unit=\"%\" />\n          </Grid>\n        </Grid>\n      )}\n    </Container>\n  )\n}\n\nconst IndoDetail = ({ property, value, unit }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container justify=\"space-between\" className={classes.indoDetailDataContainer}>\n      <Grid item>{property}</Grid>\n      <Grid item>{`${value}${unit ? unit : ''}`}</Grid>\n    </Grid>\n  )\n}\n\nexport default InfoCurrentInfo;\n","import React from 'react';\nimport './App.css';\n\nimport AllCountries from './components/AllCountries';\nimport IndoCurrentInfo from './components/IndoCurrentInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IndoCurrentInfo />\n      <AllCountries />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}